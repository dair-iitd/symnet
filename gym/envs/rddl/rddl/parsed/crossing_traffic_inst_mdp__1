#####TASK##### Here
## name
crossing_traffic_inst_mdp__1
## horizon
40
## discount factor
1
## number of action fluents
4
## number of det state fluents
11
## number of prob state fluents
1
## number of preconds
0
## number of actions
5
## number of hashing functions
13
## initial state
1 0 0 0 0 0 0 0 1 0 0 1 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1


#####ACTION FLUENTS#####
## index
0
## name
move-east
## number of values
2
## values
0 false
1 true

## index
1
## name
move-north
## number of values
2
## values
0 false
1 true

## index
2
## name
move-south
## number of values
2
## values
0 false
1 true

## index
3
## name
move-west
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####
## index
0
## name
obstacle-at(x1, y2)
## number of values
2
## values
0 false
1 true
## formula
$s(1)
## hash index
0
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
1
## name
obstacle-at(x2, y2)
## number of values
2
## values
0 false
1 true
## formula
$s(11)
## hash index
1
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0

## index
2
## name
robot-at(x1, y1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(2)) : $c(0)) (and($a(2) $s(3) ~($s(0))) : $c(1)) (and($a(0) $s(2)) : $c(0)) (and($a(3) $s(5)) : $c(1)) ($c(1) : $s(2)) )
## hash index
2
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
3
## name
robot-at(x1, y2)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(2)) : $c(1)) (and($a(1) $s(3)) : $c(0)) (and($a(2) $s(4)) : $c(1)) (and($a(2) $s(3)) : $c(0)) (and($a(0) $s(3)) : $c(0)) (and($a(3) $s(6) ~($s(1))) : $c(1)) ($c(1) : and($s(3) ~($s(0)))) )
## hash index
3
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
4
## name
robot-at(x1, y3)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(3) ~($s(0))) : $c(1)) (and($a(2) $s(4)) : $c(0)) (and($a(0) $s(4)) : $c(0)) (and($a(3) $s(7)) : $c(1)) ($c(1) : $s(4)) )
## hash index
4
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
5
## name
robot-at(x2, y1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(5)) : $c(0)) (and($a(2) $s(6) ~($s(1))) : $c(1)) (and($a(0) $s(2)) : $c(1)) (and($a(0) $s(5)) : $c(0)) (and($a(3) $s(8)) : $c(1)) (and($a(3) $s(5)) : $c(0)) ($c(1) : $s(5)) )
## hash index
5
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
6
## name
robot-at(x2, y2)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(5)) : $c(1)) (and($a(1) $s(6)) : $c(0)) (and($a(2) $s(7)) : $c(1)) (and($a(2) $s(6)) : $c(0)) (and($a(0) $s(3) ~($s(0))) : $c(1)) (and($a(0) $s(6)) : $c(0)) (and($a(3) $s(9) ~($s(11))) : $c(1)) (and($a(3) $s(6)) : $c(0)) ($c(1) : and($s(6) ~($s(1)))) )
## hash index
6
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
7
## name
robot-at(x2, y3)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(6) ~($s(1))) : $c(1)) (and($a(2) $s(7)) : $c(0)) (and($a(0) $s(4)) : $c(1)) (and($a(0) $s(7)) : $c(0)) (and($a(3) $s(10)) : $c(1)) (and($a(3) $s(7)) : $c(0)) ($c(1) : $s(7)) )
## hash index
7
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
8
## name
robot-at(x3, y1)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(8)) : $c(0)) (and($a(2) $s(9) ~($s(11))) : $c(1)) (and($a(0) $s(5)) : $c(1)) (and($a(3) $s(8)) : $c(0)) ($c(1) : $s(8)) )
## hash index
8
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
9
## name
robot-at(x3, y2)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(0)) (and($a(1) $s(8)) : $c(1)) (and($a(1) $s(9)) : $c(0)) (and($a(2) $s(10)) : $c(1)) (and($a(2) $s(9)) : $c(0)) (and($a(0) $s(6) ~($s(1))) : $c(1)) (and($a(3) $s(9)) : $c(0)) ($c(1) : and($s(9) ~($s(11)))) )
## hash index
9
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4

## index
10
## name
robot-at(x3, y3)
## number of values
2
## values
0 false
1 true
## formula
switch( ($s(10) : $c(1)) ($s(10) : $c(0)) (and($a(1) $s(9) ~($s(11))) : $c(1)) (and($a(2) $s(10)) : $c(0)) (and($a(0) $s(7)) : $c(1)) (and($a(3) $s(10)) : $c(0)) ($c(1) : $s(10)) )
## hash index
10
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4



#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
obstacle-at(x3, y2)
## number of values
2
## values
0 false
1 true
## formula
Bernoulli($c(0.3))
## hash index
11
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0



#####REWARD#####
## formula
-($c(0) ~($s(10)))
## min
-1
## max
0
## independent from actions
1
## hash index
12
## caching type
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 1 0 0 
## relevant preconditions
0


## index
4
## state
1 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
4
2 5
3 5
4 5
6 5
## kleene state fluent hash keys (first line is the number of keys)
0

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
6
0 1
3 10
5 5
6 10
7 5
9 5
## kleene state fluent hash keys (first line is the number of keys)
0

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
2 10
3 20
5 10
## kleene state fluent hash keys (first line is the number of keys)
0

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
4
2 20
3 40
4 10
6 20
## kleene state fluent hash keys (first line is the number of keys)
0

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
3 80
4 20
7 10
## kleene state fluent hash keys (first line is the number of keys)
0

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
4
2 40
5 20
6 40
8 5
## kleene state fluent hash keys (first line is the number of keys)
0

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
5
3 160
5 40
6 80
7 20
9 10
## kleene state fluent hash keys (first line is the number of keys)
0

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
4
4 40
6 160
7 40
10 5
## kleene state fluent hash keys (first line is the number of keys)
0

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
5 80
8 10
9 20
## kleene state fluent hash keys (first line is the number of keys)
0

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
4
6 320
8 20
9 40
10 10
## kleene state fluent hash keys (first line is the number of keys)
0

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
10
2 80
3 320
4 80
5 160
6 640
7 80
8 40
9 80
10 20
12 1
## kleene state fluent hash keys (first line is the number of keys)
0


#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
5
1 1
6 1280
8 80
9 160
10 40
## kleene state fluent hash keys (first line is the number of keys)
5
36630848 139707272911736
6 32805
8 405
9 1215
10 135

