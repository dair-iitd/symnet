#####TASK##### Here
## name
tamarisk_inst_mdp__1
## horizon
40
## discount factor
1
## number of action fluents
8
## number of det state fluents
0
## number of prob state fluents
16
## number of preconds
0
## number of actions
9
## number of hashing functions
17
## initial state
1 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 
## 1 if task is deterministic
0
## 1 if state hashing possible
1
## 1 if kleene state hashing possible
1


#####ACTION FLUENTS#####
## index
0
## name
eradicate(r1)
## number of values
2
## values
0 false
1 true

## index
1
## name
eradicate(r2)
## number of values
2
## values
0 false
1 true

## index
2
## name
eradicate(r3)
## number of values
2
## values
0 false
1 true

## index
3
## name
eradicate(r4)
## number of values
2
## values
0 false
1 true

## index
4
## name
restore(r1)
## number of values
2
## values
0 false
1 true

## index
5
## name
restore(r2)
## number of values
2
## values
0 false
1 true

## index
6
## name
restore(r3)
## number of values
2
## values
0 false
1 true

## index
7
## name
restore(r4)
## number of values
2
## values
0 false
1 true



#####DET STATE FLUENTS AND CPFS#####


#####PROB STATE FLUENTS AND CPFS#####
## index
0
## name
native-at(s1s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(8) $s(0)) : Bernoulli($c(0.2))) (and(~($s(8)) $s(0) $a(4)) : $c(1)) (and(~($s(8)) ~($s(0)) $a(4)) : Bernoulli($c(0.9))) ($s(0) : Bernoulli($c(0.95))) (and(~($s(8)) ~($s(0))) : Bernoulli($c(0.1))) ($c(1) : $s(0)) )
## hash index
0
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0

## index
1
## name
native-at(s1s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(9) $s(1)) : Bernoulli($c(0.2))) (and(~($s(9)) $s(1) $a(4)) : $c(1)) (and(~($s(9)) ~($s(1)) $a(4)) : Bernoulli($c(0.9))) ($s(1) : Bernoulli($c(0.95))) (and(~($s(9)) ~($s(1))) : Bernoulli($c(0.1))) ($c(1) : $s(1)) )
## hash index
1
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 1
5 0
6 0
7 0
8 0

## index
2
## name
native-at(s2s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(10) $s(2)) : Bernoulli($c(0.2))) (and(~($s(10)) $s(2) $a(5)) : $c(1)) (and(~($s(10)) ~($s(2)) $a(5)) : Bernoulli($c(0.9))) ($s(2) : Bernoulli($c(0.95))) (and(~($s(10)) ~($s(2))) : Bernoulli($c(0.1))) ($c(1) : $s(2)) )
## hash index
2
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0

## index
3
## name
native-at(s2s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(11) $s(3)) : Bernoulli($c(0.2))) (and(~($s(11)) $s(3) $a(5)) : $c(1)) (and(~($s(11)) ~($s(3)) $a(5)) : Bernoulli($c(0.9))) ($s(3) : Bernoulli($c(0.95))) (and(~($s(11)) ~($s(3))) : Bernoulli($c(0.1))) ($c(1) : $s(3)) )
## hash index
3
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 1
4 0
5 0
6 0
7 0
8 0

## index
4
## name
native-at(s3s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(12) $s(4)) : Bernoulli($c(0.2))) (and(~($s(12)) $s(4) $a(6)) : $c(1)) (and(~($s(12)) ~($s(4)) $a(6)) : Bernoulli($c(0.9))) ($s(4) : Bernoulli($c(0.95))) (and(~($s(12)) ~($s(4))) : Bernoulli($c(0.1))) ($c(1) : $s(4)) )
## hash index
4
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0

## index
5
## name
native-at(s3s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(13) $s(5)) : Bernoulli($c(0.2))) (and(~($s(13)) $s(5) $a(6)) : $c(1)) (and(~($s(13)) ~($s(5)) $a(6)) : Bernoulli($c(0.9))) ($s(5) : Bernoulli($c(0.95))) (and(~($s(13)) ~($s(5))) : Bernoulli($c(0.1))) ($c(1) : $s(5)) )
## hash index
5
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 1
3 0
4 0
5 0
6 0
7 0
8 0

## index
6
## name
native-at(s4s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(14) $s(6)) : Bernoulli($c(0.2))) (and(~($s(14)) $s(6) $a(7)) : $c(1)) (and(~($s(14)) ~($s(6)) $a(7)) : Bernoulli($c(0.9))) ($s(6) : Bernoulli($c(0.95))) (and(~($s(14)) ~($s(6))) : Bernoulli($c(0.1))) ($c(1) : $s(6)) )
## hash index
6
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0

## index
7
## name
native-at(s4s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(15) $s(7)) : Bernoulli($c(0.2))) (and(~($s(15)) $s(7) $a(7)) : $c(1)) (and(~($s(15)) ~($s(7)) $a(7)) : Bernoulli($c(0.9))) ($s(7) : Bernoulli($c(0.95))) (and(~($s(15)) ~($s(7))) : Bernoulli($c(0.1))) ($c(1) : $s(7)) )
## hash index
7
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 0
3 0
4 0
5 0
6 0
7 0
8 0

## index
8
## name
tamarisk-at(s1s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(8) $s(0)) : Bernoulli($c(0.8))) (and(~($s(8)) $a(0)) : $c(0)) (and($s(8) $a(0)) : Bernoulli($c(0.1))) ($s(8) : Bernoulli($c(0.95))) (and(~($s(8)) ~($s(0))) : Bernoulli(+(*(-($c(1) *(switch( ($s(9) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(10) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(11) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(8)) )
## hash index
8
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1

## index
9
## name
tamarisk-at(s1s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(9) $s(1)) : Bernoulli($c(0.8))) (and(~($s(9)) $a(0)) : $c(0)) (and($s(9) $a(0)) : Bernoulli($c(0.1))) ($s(9) : Bernoulli($c(0.95))) (and(~($s(9)) ~($s(1))) : Bernoulli(+(*(-($c(1) *(switch( ($s(8) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(10) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(11) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(9)) )
## hash index
9
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 1

## index
10
## name
tamarisk-at(s2s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(10) $s(2)) : Bernoulli($c(0.8))) (and(~($s(10)) $a(1)) : $c(0)) (and($s(10) $a(1)) : Bernoulli($c(0.1))) ($s(10) : Bernoulli($c(0.95))) (and(~($s(10)) ~($s(2))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(11) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(8) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(9) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(12) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(13) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(10)) )
## hash index
10
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0

## index
11
## name
tamarisk-at(s2s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(11) $s(3)) : Bernoulli($c(0.8))) (and(~($s(11)) $a(1)) : $c(0)) (and($s(11) $a(1)) : Bernoulli($c(0.1))) ($s(11) : Bernoulli($c(0.95))) (and(~($s(11)) ~($s(3))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(10) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(8) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(9) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(12) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(13) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(11)) )
## hash index
11
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 1
8 0

## index
12
## name
tamarisk-at(s3s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(12) $s(4)) : Bernoulli($c(0.8))) (and(~($s(12)) $a(2)) : $c(0)) (and($s(12) $a(2)) : Bernoulli($c(0.1))) ($s(12) : Bernoulli($c(0.95))) (and(~($s(12)) ~($s(4))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(13) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(10) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(11) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(14) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(15) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(12)) )
## hash index
12
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0

## index
13
## name
tamarisk-at(s3s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(13) $s(5)) : Bernoulli($c(0.8))) (and(~($s(13)) $a(2)) : $c(0)) (and($s(13) $a(2)) : Bernoulli($c(0.1))) ($s(13) : Bernoulli($c(0.95))) (and(~($s(13)) ~($s(5))) : Bernoulli(+(*(-($c(1) *(*(switch( ($s(12) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(10) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(11) : $c(0.4)) ($c(1) : $c(1)) ))) *(switch( ($s(14) : $c(0.85)) ($c(1) : $c(1)) ) switch( ($s(15) : $c(0.85)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(13)) )
## hash index
13
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 0
6 1
7 0
8 0

## index
14
## name
tamarisk-at(s4s1)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(14) $s(6)) : Bernoulli($c(0.8))) (and(~($s(14)) $a(3)) : $c(0)) (and($s(14) $a(3)) : Bernoulli($c(0.1))) ($s(14) : Bernoulli($c(0.95))) (and(~($s(14)) ~($s(6))) : Bernoulli(+(*(-($c(1) *(switch( ($s(15) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(12) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(13) : $c(0.4)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(14)) )
## hash index
14
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0

## index
15
## name
tamarisk-at(s4s2)
## number of values
2
## values
0 false
1 true
## formula
switch( (and($s(15) $s(7)) : Bernoulli($c(0.8))) (and(~($s(15)) $a(3)) : $c(0)) (and($s(15) $a(3)) : Bernoulli($c(0.1))) ($s(15) : Bernoulli($c(0.95))) (and(~($s(15)) ~($s(7))) : Bernoulli(+(*(-($c(1) *(switch( ($s(14) : $c(0.4)) ($c(1) : $c(1)) ) *(switch( ($s(12) : $c(0.4)) ($c(1) : $c(1)) ) switch( ($s(13) : $c(0.4)) ($c(1) : $c(1)) )))) $c(0.9)) $c(0.1)))) ($c(1) : $s(15)) )
## hash index
15
## caching type 
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 0
2 0
3 0
4 0
5 1
6 0
7 0
8 0



#####REWARD#####
## formula
+(*(or($s(8) $s(9)) $c(-5)) *(or($s(10) $s(11)) $c(-5)) *(or($s(12) $s(13)) $c(-5)) *(or($s(14) $s(15)) $c(-5)) *($s(8) $c(-0.5)) *($s(9) $c(-0.5)) *($s(10) $c(-0.5)) *($s(11) $c(-0.5)) *($s(12) $c(-0.5)) *($s(13) $c(-0.5)) *($s(14) $c(-0.5)) *($s(15) $c(-0.5)) *(and(~($s(8)) ~($s(0))) $c(-0.25)) *(and(~($s(9)) ~($s(1))) $c(-0.25)) *(and(~($s(10)) ~($s(2))) $c(-0.25)) *(and(~($s(11)) ~($s(3))) $c(-0.25)) *(and(~($s(12)) ~($s(4))) $c(-0.25)) *(and(~($s(13)) ~($s(5))) $c(-0.25)) *(and(~($s(14)) ~($s(6))) $c(-0.25)) *(and(~($s(15)) ~($s(7))) $c(-0.25)) *($a(0) $c(-0.49)) *($a(1) $c(-0.49)) *($a(2) $c(-0.49)) *($a(3) $c(-0.49)) *($a(4) $c(-0.9)) *($a(5) $c(-0.9)) *($a(6) $c(-0.9)) *($a(7) $c(-0.9)) *(and($a(4) ~($s(8)) ~($s(0))) $c(-0.4)) *(and($a(4) ~($s(9)) ~($s(1))) $c(-0.4)) *(and($a(5) ~($s(10)) ~($s(2))) $c(-0.4)) *(and($a(5) ~($s(11)) ~($s(3))) $c(-0.4)) *(and($a(6) ~($s(12)) ~($s(4))) $c(-0.4)) *(and($a(6) ~($s(13)) ~($s(5))) $c(-0.4)) *(and($a(7) ~($s(14)) ~($s(6))) $c(-0.4)) *(and($a(7) ~($s(15)) ~($s(7))) $c(-0.4)))
## min
-27.7
## max
-0
## independent from actions
0
## hash index
16
## caching type
NONE
## kleene caching type
NONE
## action hash keys
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8


#####PRECONDITIONS#####


#####ACTION STATES#####
## index
0
## state
0 0 0 0 0 0 0 0 
## relevant preconditions
0


## index
1
## state
0 0 0 0 0 0 0 1 
## relevant preconditions
0


## index
2
## state
0 0 0 0 0 0 1 0 
## relevant preconditions
0


## index
3
## state
0 0 0 0 0 1 0 0 
## relevant preconditions
0


## index
4
## state
0 0 0 0 1 0 0 0 
## relevant preconditions
0


## index
5
## state
0 0 0 1 0 0 0 0 
## relevant preconditions
0


## index
6
## state
0 0 1 0 0 0 0 0 
## relevant preconditions
0


## index
7
## state
0 1 0 0 0 0 0 0 
## relevant preconditions
0


## index
8
## state
1 0 0 0 0 0 0 0 
## relevant preconditions
0



#####HASH KEYS OF DETERMINISTIC STATE FLUENTS#####

#####HASH KEYS OF PROBABILISTIC STATE FLUENTS#####
## index
0
## state hash key (for each value in the domain)
0 1
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
0 2
8 2
16 9
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
8 2
16 9

## index
1
## state hash key (for each value in the domain)
0 2
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
1 2
9 2
16 18
## kleene state fluent hash keys (first line is the number of keys)
3
36172016 2
9 2
16 27

## index
2
## state hash key (for each value in the domain)
0 4
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
2 2
10 2
16 36
## kleene state fluent hash keys (first line is the number of keys)
3
0 2
10 2
16 81

## index
3
## state hash key (for each value in the domain)
0 8
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
3 2
11 2
16 72
## kleene state fluent hash keys (first line is the number of keys)
3
36233216 2
11 2
16 243

## index
4
## state hash key (for each value in the domain)
0 16
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
4 2
12 2
16 144
## kleene state fluent hash keys (first line is the number of keys)
3
36227488 2
12 2
16 729

## index
5
## state hash key (for each value in the domain)
0 32
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
5 2
13 2
16 288
## kleene state fluent hash keys (first line is the number of keys)
3
36182656 2
13 2
16 2187

## index
6
## state hash key (for each value in the domain)
0 64
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
6 2
14 2
16 576
## kleene state fluent hash keys (first line is the number of keys)
3
36310720 2
14 2
16 6561

## index
7
## state hash key (for each value in the domain)
0 128
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
3
7 2
15 2
16 1152
## kleene state fluent hash keys (first line is the number of keys)
3
36311296 2
15 2
16 19683

## index
8
## state hash key (for each value in the domain)
0 256
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
6
0 4
8 4
9 4
10 4
11 4
16 2304
## kleene state fluent hash keys (first line is the number of keys)
6
-1193075848 36271952
8 6
9 6
10 6
11 6
16 59049

## index
9
## state hash key (for each value in the domain)
0 512
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
6
1 4
8 8
9 8
10 8
11 8
16 4608
## kleene state fluent hash keys (first line is the number of keys)
6
36234240 36301696
8 18
9 18
10 18
11 18
16 177147

## index
10
## state hash key (for each value in the domain)
0 1024
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
8
2 4
8 16
9 16
10 16
11 16
12 4
13 4
16 9216
## kleene state fluent hash keys (first line is the number of keys)
8
2 6
8 54
9 54
10 54
11 54
12 6
13 6
16 531441

## index
11
## state hash key (for each value in the domain)
0 2048
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
8
3 4
8 32
9 32
10 32
11 32
12 8
13 8
16 18432
## kleene state fluent hash keys (first line is the number of keys)
8
3 6
8 162
9 162
10 162
11 162
12 18
13 18
16 1594323

## index
12
## state hash key (for each value in the domain)
0 4096
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
8
4 4
10 64
11 64
12 16
13 16
14 4
15 4
16 36864
## kleene state fluent hash keys (first line is the number of keys)
8
36271952 36310000
10 486
11 486
12 54
13 54
14 6
15 6
16 4782969

## index
13
## state hash key (for each value in the domain)
0 8192
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
8
5 4
10 128
11 128
12 32
13 32
14 8
15 8
16 73728
## kleene state fluent hash keys (first line is the number of keys)
8
5 6
10 1458
11 1458
12 162
13 162
14 18
15 18
16 14348907

## index
14
## state hash key (for each value in the domain)
0 16384
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
6
6 4
12 64
13 64
14 16
15 16
16 147456
## kleene state fluent hash keys (first line is the number of keys)
6
36301696 140641805998968
12 486
13 486
14 54
15 54
16 43046721

## index
15
## state hash key (for each value in the domain)
0 32768
## kleene state hash key base
0
## state fluent hash keys (first line is the number of keys)
6
7 4
12 128
13 128
14 32
15 32
16 294912
## kleene state fluent hash keys (first line is the number of keys)
6
7 6
12 1458
13 1458
14 162
15 162
16 129140163

